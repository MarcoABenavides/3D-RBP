%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Tue Nov 26 16:43:37 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACAAGAUUUCAGCAAUAAGGGCACACUCUGGGGCUUUGUGCCAUUUGUGGAUGAACAGCAACCAACUGAAAUACCAAUUCCAAUUACCCUUCAUAUUG\
) } def
/len { sequence length } bind def

/coor [
[124.60519409 306.76794434]
[119.56209564 292.60195923]
[116.98576355 277.78741455]
[116.95033264 262.75057983]
[119.45682526 247.92405701]
[124.43310547 233.73445129]
[131.73602295 220.59004211]
[141.15542603 208.86900330]
[152.42033386 198.90858459]
[144.52384949 186.15533447]
[136.62736511 173.40206909]
[128.73088074 160.64881897]
[120.83439636 147.89555359]
[112.93791199 135.14230347]
[105.04143524 122.38904572]
[86.09712982 120.91063690]
[73.14866638 104.76969910]
[76.25992584 82.60193634]
[63.50666809 74.70545197]
[50.75341034 66.80896759]
[38.00015259 58.91248703]
[25.24689484 51.01600647]
[12.37355042 43.31685257]
[-0.61683095 35.81685257]
[-13.60721207 28.31685066]
[-26.59759331 20.81685066]
[-39.58797455 13.31685066]
[-52.57835388 5.81685114]
[-65.48021698 14.05095863]
[-80.73180389 15.33454895]
[-94.82842255 9.37266254]
[-104.53075409 -2.46470380]
[-107.60929108 -17.45740891]
[-103.35660553 -32.16024017]
[-92.74992371 -43.19459152]
[-78.22659302 -48.02485275]
[-63.12396622 -45.54106522]
[-50.91251373 -36.31398392]
[-44.39833832 -22.46392441]
[-45.07835388 -7.17353010]
[-32.08797455 0.32646996]
[-19.09759331 7.82646990]
[-6.10721207 15.32647038]
[6.88316917 22.82646942]
[19.87355042 30.32646942]
[27.36963463 30.95572281]
[33.14337921 38.26274872]
[45.89663696 46.15922928]
[58.64989090 54.05571365]
[71.40315247 61.95219421]
[84.15640259 69.84867859]
[98.64529419 65.96639252]
[105.74169922 52.75120926]
[105.45381165 36.93262100]
[118.29165649 29.38020706]
[125.38806152 16.16502380]
[122.15595245 0.45092201]
[132.53681946 -11.78088570]
[148.56735229 -11.14720249]
[157.95030212 1.86586380]
[153.48786926 17.27580261]
[138.60324097 23.26142883]
[131.50683594 36.47661209]
[132.30230713 51.34996033]
[118.95687866 59.84761429]
[111.86047363 73.06279755]
[123.35088348 85.91168976]
[125.04861450 101.76399994]
[117.79468536 114.49256134]
[125.69116974 127.24581909]
[133.58764648 139.99906921]
[141.48413086 152.75233459]
[149.38061523 165.50558472]
[157.27709961 178.25885010]
[165.17358398 191.01210022]
[179.11099243 185.36791992]
[193.80181885 182.16052246]
[208.82341003 181.48219299]
[223.74353027 183.35246277]
[238.13291931 187.71748352]
[251.57756042 194.45170593]
[263.69061279 203.36134338]
[274.12359619 214.19006348]
[282.57629395 226.62629700]
[288.80551147 240.31222534]
[292.63204956 254.85409546]
[293.94577026 269.83349609]
[292.70889282 284.81942749]
[288.95703125 299.38070679]
[282.79809570 313.09841919]
[274.40930176 325.57785034]
[264.03201294 336.45996094]
[251.96482849 345.43161011]
[238.55490112 352.23471069]
[224.18809509 356.67352295]
[209.27777100 358.62026978]
[194.25289917 358.01901245]
[179.54580688 354.88702393]
[165.57963562 349.31442261]
[152.75621033 341.46154785]
[141.44450378 331.55432129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[52 66]
[53 65]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
